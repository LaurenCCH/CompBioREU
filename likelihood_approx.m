%This code take a time and a q as inputs and uses the generated data to
%calculate the probability of observing a single event within a range of
%times

function [log_liklihood_t_values, t_prb] = likelihood_approx(t,q0,num_sims,bw,degenerate_probability)
%This code approximates the loglikelihood of q0 (log_liklihood_t_values) given the data t. It
%approximates the likelihood as a histogram that is generated by simulating
%the process with parameter q0 num_sims times.  In so doing, some elements
%of t may not be observed.  The probability of these elemets is set to
%degenerate_probability. 

% call phospho_times to generate data t_sim, by simulating the process with
% parameter q.
[t_sim] = phospho_times(q0,.01,num_sims);

%This code creates a histogram and then takes the bin counts and turns
%them into probabilities

%histogram(t_sim,'BinWidth', bw,'Normalization','pdf')

%This code take the bin counts and turns them into probabilities
[bin_prb,edges] = histcounts(t_sim,'BinWidth', bw,'Normalization', 'probability');

%This divides the probabilities by the bin-width to calculate the height of
%the bin
bin_h = bin_prb./bw;

%This initializes a vector, list_probs, with zeros
t_prb=zeros(1,length(t));

%This loop iterates through the vector of sorted times, t_1, and 
%sorts each time into the proper bin and thus assigns it the corresponding
%probability
for d=1:length(t)
    %If the time is less than the left bound of the histogram
    % or greater than the right bound, it assigns a probability of zero
    %first_edge_multiple_of_width=floor(edges(1)/bw);
    
    if t(d)<edges(1) || t(d)>edges(length(edges))
        t_prb(d)=0;
    
    else 
        bin_index_t = floor((t(d)-edges(1))/bw)+1;
        %If the time is on the rightmost edge of the histogram, it is
        %assigned the probability corresponding to the last bin
        if bin_index_t==length(edges)
            bin_index_t = bin_index_t-1;
        end
 
        %if bin_index_t>length(bin_h)
           % bin_index_t
       % end
        t_prb(d) = bin_h(bin_index_t);
        
    end
end
       
%This loop assigns a degenarte probability to every probability of zero to
%prevent the log likelihood from equaling -Inf
for m=1:length(t_prb)
    if t_prb(m)==0
        t_prb(m)=degenerate_probability;
    end
end

%This takes the log of every probability and sums them to calculate the log
%likelihood of t.
log_liklihood_t_values = sum(log(t_prb));


end


	
	
